---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Openvidu Server Pro CloudFormation template."

Parameters:
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance."
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: "must be the name of an existing EC2 KeyPair."
  
  InstanceType:
    Description: "EC2 Instance type"
    Type: String
    Default: c5.xlarge
    AllowedValues:
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    ConstraintDescription: "Must be a valid EC2 instance type."

  ImageId:
    Description: "AMI Id for OpenVidu Pro"
    Type: String
  
  MyDomainName: 
    Description: "Valid DNS record name like mycompany.com."
    Type: String
  
  PublicElasticIP:
    Description: "Valid AWS elastic IP for using with Let's Encrypt or OwnCertificate."
    Type: String
  
  OpenViduSecret:
    Description: "Secret to connect to your OpenVidu Server."
    Type: String
    NoEcho: true
  
  WhichCert: 
    Description: "You can choose from the list below which certificate to use."
    Type: String
    Default: selfsigned
    AllowedValues:
    - selfsigned
    - letsencrypt
    - owncert
  LetsEncryptEmail:
    Description: "Email necesary for Let's Encrypt notifications."
    Type: String
  
  OwnCertCRT:
    Description: "URL to the CRT file"
    Type: String

  OwnCertKEY: 
    Description: "URL to the KEY file"
    Type: String

  FreeHTTPAccesToRecordingVideos:
    Description: "Do you want your recordings to be access publicly?"
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  
  OpenviduRecordingNotification:
    Description: "Which users should receive the recording events in the client side (recordingStarted, recordingStopped)."
    Type: String
    Default: "publisher_moderator"
    AllowedValues: 
    - "all"
    - "publisher_moderator"
    - "moderator"
    - "none"
  
  OpenviduStreamsVideoMaxRecvBandwidth: 
    Description: "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained."
    Type: String
    Default: 0
    
  OpenviduStreamsVideoMinRecvBandwidth:
    Description: "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained."
    Type: String
    Default: 0

  OpenviduStreamsVideoMaxSendBandwidth: 
    Description: "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained."
    Type: String
    Default: 0
    
  OpenviduStreamsVideoMinSendBandwidth:
    Description: "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained."
    Type: String
    Default: 0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: SSL Certificate Configuration
        Parameters:
        - WhichCert
        - LetsEncryptEmail
        - MyDomainName
        - PublicElasticIP
        - OwnCertCRT
        - OwnCertKEY
      -
        Label:
          default: Openvidu Configuration
        Parameters:
        - OpenViduSecret
        - FreeHTTPAccesToRecordingVideos
        - OpenviduRecordingNotification
        - OpenviduStreamsVideoMaxRecvBandwidth
        - OpenviduStreamsVideoMinRecvBandwidth
        - OpenviduStreamsVideoMaxSendBandwidth
        - OpenviduStreamsVideoMinSendBandwidth
    
    ParameterLabels:
      WhichCert: 
        default: Type of SSL Certificate
      MyDomainName:
        default: Fully qualified domain name
      PublicElasticIP: 
        default: Elastic IP
      LetsEncryptEmail:
        default: Email
      OpenViduSecret: 
        default: OpenVidu Secret
      FreeHTTPAccesToRecordingVideos: 
          default: Free HTTP access to recorded videos

Conditions: 
  NoSelfSigned:
    'Fn::Not':
      - 'Fn::Equals':
          - Ref: WhichCert
          - selfsigned

Resources:
  OpenviduServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Openvidu Pro
      AWS::CloudFormation::Init:
        config:
          files:
            /usr/local/bin/debuggingPackages.sh:
              content: |
                #!/bin/bash
                PACKAGES=(libglib2.0-0-dbg libssl1.0.0-dbg gstreamer1.5-plugins-base-dbg gstreamer1.5-plugins-good-dbg gstreamer1.5-plugins-ugly-dbg gstreamer1.5-plugins-bad-dbg gstreamer1.5-libav-dbg libgstreamer1.5-0-dbg libnice10-dbgsym libsrtp1-dbg openwebrtc-gst-plugins-dbg kmsjsoncpp-dbg kms-jsonrpc-dbg kms-core-dbg kms-elements-dbg kms-filters-dbg kurento-media-server-dbg kms-chroma-dbg kms-crowddetector-dbg kms-platedetector-dbg kms-pointerdetector-dbg)
                apt-get update
                apt-get install -y "${PACKAGES[@]}"
                echo "export GST_DEBUG_NO_COLOR=1" >> /etc/default/kurento-media-server
              mode: "000755"
              owner: "root"
              group: "root"
            /usr/local/bin/testWebapp.sh:
              content: |
                #!/bin/bash
                rm -rf /var/www/html/*
                git clone https://github.com/OpenVidu/openvidu-loadtest.git /var/www/html/openvidu-loadtest
                mv /var/www/html/openvidu-loadtest/webapp/* /var/www/html
                rm -rf /var/www/html/openvidu-loadtest
              mode: "000755"
              owner: "root"
              group: "root"
            /usr/local/bin/getPublicInfo.sh:
              content: |
                #!/bin/bash
                WORKINGDIR=/usr/src/openvidu
                PIP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
                PublicHostname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
                sed -i "s/AWS_EIP/$PIP/" $WORKINGDIR/group_vars/all
                sed -i "s/AWS_PUBLIC_HOSTNAME/$PublicHostname/" $WORKINGDIR/group_vars/all
              mode: "000755"
              owner: "root"
              group: "root"
            /usr/local/bin/feedGroupVars.sh:
              content: !Sub |
                #!/bin/bash
                WORKINGDIR=/usr/src/openvidu
                sed -i "s/whichcert: selfsigned/whichcert: ${WhichCert}/" $WORKINGDIR/group_vars/all
                sed -i "s/DOMAIN_NAME/${MyDomainName}/" $WORKINGDIR/group_vars/all
                sed -i "s/LETSENCRYPT_EMAIL/${LetsEncryptEmail}/" $WORKINGDIR/group_vars/all
                sed -i "s/openvidusecret: MY_SECRET/openvidusecret: ${OpenViduSecret}/" $WORKINGDIR/group_vars/all
                sed -i "s/FREEHTTPACCESTORECORDINGVIDEOS/${FreeHTTPAccesToRecordingVideos}/" $WORKINGDIR/group_vars/all
                sed -i "s/run_ec2: false/run_ec2: true/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDURECORDINGNOTIFICATION/${OpenviduRecordingNotification}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-RECV-BANDWIDTH/${OpenviduStreamsVideoMaxRecvBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-RECV-BANDWIDTH/${OpenviduStreamsVideoMinRecvBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-SEND-BANDWIDTH/${OpenviduStreamsVideoMaxSendBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-SEND-BANDWIDTH/${OpenviduStreamsVideoMinSendBandwidth}/" $WORKINGDIR/group_vars/all
              mode: "000755"
              owner: "root"
              group: "root"
            /usr/local/bin/buildCerts.sh:
              content: !Sub |
                #!/bin/bash -x
                WORKINGDIR=/usr/src/openvidu
                wget -O $WORKINGDIR/roles/nginx/files/nginx.crt ${OwnCertCRT}
                wget -O $WORKINGDIR/roles/nginx/files/nginx.key ${OwnCertKEY}
              mode: "000755"
              owner: "root"
              group: "root"
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref OpenviduServerSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          set -eu -o pipefail

          cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource OpenviduServer
          /usr/local/bin/getPublicInfo.sh || { echo "[Openvidu] Network problem"; exit 1; }
          /usr/local/bin/feedGroupVars.sh || { echo "[Openvidu] Parameters incorrect/insufficient"; exit 1; }
          if [ "${WhichCert}" == "owncert" ]; then
            /usr/local/bin/buildCerts.sh || { echo "[Openvidu] error with the certificate files"; exit 1; }
          fi

          /usr/local/bin/debuggingPackages.sh || { echo "[Openvidu] Install debugging packages problem"; exit 1; }

          pushd /usr/src/openvidu
          ansible-playbook -i "localhost," -c local play.yml
          popd

          /usr/local/bin/testWebapp.sh || { echo "[Openvidu] Download test webapp problem"; exit 1; }

          # sending the finish call
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WaitCondition --region ${AWS::Region}
  
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            Iops: 200
            DeleteOnTermination: true
            VolumeSize: 10
  
  OpenviduServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Openvidu ports
      SecurityGroupIngress:
      - IpProtocol: tcp 
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  MyEIP:
    Type: AWS::EC2::EIPAssociation
    Condition: NoSelfSigned
    Properties:
      InstanceId: !Ref OpenviduServer
      EIP: !Ref PublicElasticIP

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: 1

Outputs:
  WebsiteURL:
    Description: "Use this URL to connect OpenVidu with user and password"
    Value: !Join 
        - ''
        - - 'https://'
          - !GetAtt OpenviduServer.PublicDnsName 
          - ':4443'
  
  WebsiteURLLE:
    Description: "Use this URL to connect to OpenVidu with user and password if you're using Let's Encrypt"
    Value: !Join
        - ''
        - - 'https://'
          - !Ref MyDomainName
          - ':4443'
    Condition: NoSelfSigned
